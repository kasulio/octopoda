/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DashboardLayoutImport } from './routes/dashboard/layout'
import { Route as IndexImport } from './routes/index'
import { Route as DashboardIndexImport } from './routes/dashboard/index'
import { Route as DashboardUsersImport } from './routes/dashboard/users'
import { Route as DashboardInstancesLayoutImport } from './routes/dashboard/instances/layout'
import { Route as DashboardInstancesIndexImport } from './routes/dashboard/instances/index'
import { Route as DashboardInstancesInstanceIdImport } from './routes/dashboard/instances/$instanceId'

// Create/Update Routes

const DashboardLayoutRoute = DashboardLayoutImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardLayoutRoute,
} as any)

const DashboardUsersRoute = DashboardUsersImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => DashboardLayoutRoute,
} as any)

const DashboardInstancesLayoutRoute = DashboardInstancesLayoutImport.update({
  id: '/instances',
  path: '/instances',
  getParentRoute: () => DashboardLayoutRoute,
} as any)

const DashboardInstancesIndexRoute = DashboardInstancesIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardInstancesLayoutRoute,
} as any)

const DashboardInstancesInstanceIdRoute =
  DashboardInstancesInstanceIdImport.update({
    id: '/$instanceId',
    path: '/$instanceId',
    getParentRoute: () => DashboardInstancesLayoutRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardLayoutImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/instances': {
      id: '/dashboard/instances'
      path: '/instances'
      fullPath: '/dashboard/instances'
      preLoaderRoute: typeof DashboardInstancesLayoutImport
      parentRoute: typeof DashboardLayoutImport
    }
    '/dashboard/users': {
      id: '/dashboard/users'
      path: '/users'
      fullPath: '/dashboard/users'
      preLoaderRoute: typeof DashboardUsersImport
      parentRoute: typeof DashboardLayoutImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof DashboardLayoutImport
    }
    '/dashboard/instances/$instanceId': {
      id: '/dashboard/instances/$instanceId'
      path: '/$instanceId'
      fullPath: '/dashboard/instances/$instanceId'
      preLoaderRoute: typeof DashboardInstancesInstanceIdImport
      parentRoute: typeof DashboardInstancesLayoutImport
    }
    '/dashboard/instances/': {
      id: '/dashboard/instances/'
      path: '/'
      fullPath: '/dashboard/instances/'
      preLoaderRoute: typeof DashboardInstancesIndexImport
      parentRoute: typeof DashboardInstancesLayoutImport
    }
  }
}

// Create and export the route tree

interface DashboardInstancesLayoutRouteChildren {
  DashboardInstancesInstanceIdRoute: typeof DashboardInstancesInstanceIdRoute
  DashboardInstancesIndexRoute: typeof DashboardInstancesIndexRoute
}

const DashboardInstancesLayoutRouteChildren: DashboardInstancesLayoutRouteChildren =
  {
    DashboardInstancesInstanceIdRoute: DashboardInstancesInstanceIdRoute,
    DashboardInstancesIndexRoute: DashboardInstancesIndexRoute,
  }

const DashboardInstancesLayoutRouteWithChildren =
  DashboardInstancesLayoutRoute._addFileChildren(
    DashboardInstancesLayoutRouteChildren,
  )

interface DashboardLayoutRouteChildren {
  DashboardInstancesLayoutRoute: typeof DashboardInstancesLayoutRouteWithChildren
  DashboardUsersRoute: typeof DashboardUsersRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardLayoutRouteChildren: DashboardLayoutRouteChildren = {
  DashboardInstancesLayoutRoute: DashboardInstancesLayoutRouteWithChildren,
  DashboardUsersRoute: DashboardUsersRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardLayoutRouteWithChildren = DashboardLayoutRoute._addFileChildren(
  DashboardLayoutRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardLayoutRouteWithChildren
  '/dashboard/instances': typeof DashboardInstancesLayoutRouteWithChildren
  '/dashboard/users': typeof DashboardUsersRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/instances/$instanceId': typeof DashboardInstancesInstanceIdRoute
  '/dashboard/instances/': typeof DashboardInstancesIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard/users': typeof DashboardUsersRoute
  '/dashboard': typeof DashboardIndexRoute
  '/dashboard/instances/$instanceId': typeof DashboardInstancesInstanceIdRoute
  '/dashboard/instances': typeof DashboardInstancesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardLayoutRouteWithChildren
  '/dashboard/instances': typeof DashboardInstancesLayoutRouteWithChildren
  '/dashboard/users': typeof DashboardUsersRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/instances/$instanceId': typeof DashboardInstancesInstanceIdRoute
  '/dashboard/instances/': typeof DashboardInstancesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/dashboard/instances'
    | '/dashboard/users'
    | '/dashboard/'
    | '/dashboard/instances/$instanceId'
    | '/dashboard/instances/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard/users'
    | '/dashboard'
    | '/dashboard/instances/$instanceId'
    | '/dashboard/instances'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/dashboard/instances'
    | '/dashboard/users'
    | '/dashboard/'
    | '/dashboard/instances/$instanceId'
    | '/dashboard/instances/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardLayoutRoute: typeof DashboardLayoutRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardLayoutRoute: DashboardLayoutRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard/layout.tsx",
      "children": [
        "/dashboard/instances",
        "/dashboard/users",
        "/dashboard/"
      ]
    },
    "/dashboard/instances": {
      "filePath": "dashboard/instances/layout.tsx",
      "parent": "/dashboard",
      "children": [
        "/dashboard/instances/$instanceId",
        "/dashboard/instances/"
      ]
    },
    "/dashboard/users": {
      "filePath": "dashboard/users.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/instances/$instanceId": {
      "filePath": "dashboard/instances/$instanceId.tsx",
      "parent": "/dashboard/instances"
    },
    "/dashboard/instances/": {
      "filePath": "dashboard/instances/index.tsx",
      "parent": "/dashboard/instances"
    }
  }
}
ROUTE_MANIFEST_END */
